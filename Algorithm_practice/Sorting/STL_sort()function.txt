sort()

#inlcude <algorithm>헤더에 포함

sort(a(메모리주소), a + 배열의 크기(마지막 데이터의 메모리 주소), 정렬기준)

정렬기준 설정하는법 
bool compare(int a, int b){
    return a < b; 뒤에 숫자가 앞에꺼 보다 크면 true를 반환
}

sort(a, a+10, compare) -> 오름 차수 정렬 디폴트는 오름 차수

만약 compare 함수 안을 return a > b 로 할 경우 내림차수 정렬

묶어서 정렬하는 방법
보통 데이터들이 객체단위로 묶여있음 
객체들을 비교하는 방법

ex) 학생을 점수순서대로 정렬

class Student{
    int score;
    int name;
    Student(string _name, int _score){
        name = _name;
        score = _score;
    }
    
    bool operator <(Student &S){
        return this->score < S.score;
    }
}

이후 sort()함수를 이용하면 바로 정렬이됨 -> 클래스 안에서 정렬기준을 이미 선언하였으므로 바로 정렬가능

class를 이용하지 않고 묶여있는 자료중 특정한 변수를 이용하여 정렬하는 방법
**pair 이용

벡터에 페어를 넣는 방법

vector<pair<int, string>> V; 로 선언

V.push_back(pair<int,string>(90, "문자열"))형식으로 이용
접근은 V[i].first -> int자료 V[i].second -> 문자열자료
pair은 .first, .second 로 접근

2중 pair로도 가능

vector<pair<string, pair<int, int,>>> V; 로 여러 기준으로 가능

V.push_back(pair<string, pair<int,int>>("문자열", pair<int,int>(90, 19962222)));이런식으로 가능

sort()이용 하려면 기준을 잡아줘야함

compare(pair<string, pair<int,int>> a, pair<string, pair<int,int>> b){
    if(a.second.first == b.second.first){
        return a.second.second > b.second.second;
    }
    else{
        return a.second.first > b.second.first; 
    }
}
-->> 첫번째 인트를 비교한후 만약 같다면 두번째를 비교하여 결과 도출(위의 예시는 내림차순)







